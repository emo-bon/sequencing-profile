{#- 
Template: sequencing.ldt.ttl.j2 
Description: 
Input: 
    - sequencing-data/shipment/batch-X/run-information-batch-xxx.csv
Sets:   
    - sequencing-data/shipment/batch-X/properties-batch-xxx.yml as batch-props
    - sequencing-data/shipment/batch-X/ena-accession-numbers-batch-xxx.csv as ena-numbers
    - sequencing-data/shipment/batch-X/list-of-samples-batch-xxx.csv as list-numbers
Variables:
    - batchID (~ in folderstructure)
    - source_mat_id
    - replicate
-#}

{%- include './includes/prefixes.ttl' %}

@base <http://data.emobon.embrc.eu/batch/{{_.batchID}}> .

{#samples included in the batch#}
<http://data.emobon.embrc.eu/sample/{{source_mat_id}}/{{replicate}}>
    a sosa:Sample, prov:Entity ;

    emobon-sequence:includedInBatch <> ;

    emobon-core:enaSampleAccNum {{ ena_accession_number_sample }} ;
    emobon-core:enaProjAccNum {{ ena_accession_number_project }} ;
    emobon-core:enaStudyAccNum {{ ena_accession_number_umbrella }} ;
    emobon-core:enaBioSampleAccNum {{ biosamples_accession_number }} ;

    dct:identifier {{ref_code}}, {{ref_code_seq}}, {{...}} ; 

    {{dna_conc}}
    {{dna_quantity_after_extraction}}

    {{reads_name}}

.

{#batch#}
{%- for batch_info in sets['batch-props'] %}
<>
    a emobon-sequence:Batch , prov:Entity ; 
    
    emobon-sequence:batchNumber {{ batchnumber | xsd("integer") }} ;
    dct:identifier {{ batchnumber | xsd("integer") }} ;

    emobon-sequence:shippingDate {{ batch_info.shipping_date | xsd("date") }} ;
    emobon-sequence:receivalDate {{ batch_info.arrival_date | xsd("date") }} ;
    emobon-sequence:batchSender [
        a schema:Organization ; 
        schema:name {{ batch_info.shipper | xsd("string") }} ;
    ] ;
    emobon-sequence:batchReceiver [
        a schema:Organization ; 
        schema:name {{ batch_info.receiver | xsd("string") }} ;
    ] ; 

    rdfs:comment {{ batch_info.comment | xsd("string") }} ;

    {#to determine how to model after receiving input on semantics/use#}
    emobon-sequence:status {{ batch_info.status | xsd("string") }} ;
    emobon-sequence:processingReady {{ batch_info.ready_for_processing | xsd("boolean") }} ;
    emobon-sequence:productionDeployment {{ batch_info.production_deployment | xsd("boolean") }} ;

    emobon-sequence:includedSample <http://data.emobon.embrc.eu/sample/{{_.source_mat_id}}/{{_.replicate}}> ;
.
{%- endfor %}


{#sequenceRun activity in which the batch was used#}
<#SequenceAnalysis>
    a emobon-sequence:SequencingRun, prov:Activity ; 
    
    {#used Batch (~ with associated sample) #}                  {# to decide which property is best #}
    prov:used <> ; 
    emobon-sequence:usedBatch <> ; 
    {#also used Samples (~ with batch being a collection of samples) #}
    {# usefull / needed to list here? #}

    {#resulting sequence files#}
    prov:generated {{ _.reads_name | xsd("string") }} ;
    prov:generated {{ _.mock_pr | xsd("string") }} ;
    prov:generated {{ _.mock_eu | xsd("string") }} ;
    
    {#sop#}
    emobon-sequence:sop {{ _.sop | xsd("anyURI") }} ; 
    {#electronicResource#}
    prov:used {%- for url in _.electronicResource %}{{url | xsd("anyURI") }}{% if not loop.last%}, {% endif %};{%- endfor %}
    
    {#other information#}
    emobon-sequence:targetGene {{ _.target_gene | xsd("string") }} ; 
    emobon-sequence:targetSubfragment {{ _.target_subfragment | xsd("string") }} ;
    emobon-sequence:libLayout {{ _.lib_layout | xsd("string") }} ; 
    emobon-sequence:analysisWorkflow {{ _.analysis | xsd("string") }} ; 
    emobon-sequence:nucleidAcidExtractionSource {%for url in _.nucl_acid_ext.split(';')%}{{ url | xsd("anyURI") }}{% if not loop.last%}, {% endif %};{%endfor%}
    emobon-sequence:nucleidAcidAmplificationSource {%for url in _.nucl_acid_amp.split(';')%}{{ url | xsd("anyURI") }}{% if not loop.last%}, {% endif %};{%endfor%}
    emobon-sequence:countOfReads {{ _.lib_reads_seqd | xsd("integer")}} ;
    emobon-sequence:seqMethod {{ _.seq_meth | xsd("string")}} ;
    emobon-sequence:seqQuality {{ _.seq_quality_check | xsd("string")}} ;
    emobon-sequence:adapters {{ _.adapters | xsd("string")}} ;
    emobon-sequence:multiplexID {{ _.mid | xsd("string")}} ;

    {#prc part#}
    emobon-sequence:pcrPrimers {{ _.pcr_primers | xsd("string") }} ;
    emobon-sequence:prcConditions {{ _.prc_cond | xsd("string") }} ;

    {#DNA Analysis part#}
    emobon-sequence:dcaConcentration [
        a sosa:Observation ; 
        sosa:userProcedure {{ _.dna_conc_method | xsd("string") }} ;
        sosa:hasResult [
            a sosa:Result, qudt:QuantityValue ; 
            qudt:numericValue {{ _.dna_conc | xsd("double") }} ;
            qudt:unit "nanograms per microliter (ng/Âµm)"^^xsd:string ;
        ] ;
    ] ; 
    emobon-sequence:dcaQuantity [
        a sosa:Observation ;
        sosa:hasResult [
            a sosa:Result, qudt:QuantityValue ; 
            qudt:numericValue {{ _.dna_quant | xsd("double") }} ;
            qudt:unit "nanograms (ng)"^^xsd:string ;
        ] ;
    ] ; 
.